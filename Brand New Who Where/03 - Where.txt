/*
################################################################################
## SYSTEM: WHERE ###############################################################


================================================================================
== WHERE: Preferences ==========================================================

* count-unfindable: 
	Show 'unfindable' count per room? (1 = yes, 0 = no)
	If 'yes', it's possible someone can intuit where someone is.

*/

&pref.where.count-unfindable [v( d.bnww )]=0



/* 
================================================================================
== WHERE: Command ==============================================================

	where

Get a list of occupied rooms and who is in that room.

*/

&c.where [v( d.bnww )]=$^\+?where$:@pemit %#=
	u( display.where.complete, 
		%#, 
// .. rooms with people in them (dbref), unfiltered
		u( f.where.rooms, %# ), 
// .. sorted lwho() - as seen by enactor
		setunion( u( .lwho, %# ), )
	)


@set [v( d.bnww )]/C.WHERE = regexp



/*
================================================================================
== WHERE: Displays & Formats ===================================================


--------------------------------------------------------------------------------
-- Where: Display a List of Rooms & the People In Them -------------------------

This allows us to pass a shortened list of 'rooms to list' or even 'who to list'

--

0: enactor (%#)
1: rooms to list, unfiltered
2: who to list (usually 'u( .lwho, %# )')

c: census of room, unfiltered
f: findable people to %#
u: unfindable people to %# (difference of %qc and %qf)

i: findable people who are 'idle'
a: findable people who are 'active' (!idle)

*/

&display.where.complete [ v( d.bnww )]=
	strcat( 
		wheader( Where ), %r, 
		iter( %1, 
			strcat( 
				setq( c, filter( fil.in-room, %2, , , %i0 )), 
				setq( f, filter( fil.findable, %qc, , , %0 )), 
				if( t( v( pref.where.count-unfindable )), 
					setq( u, setdiff( %qc, %qf )), 
					setq( u, )
				), 
				setq( i, 
					sortby( sortby.connected, filter( f.check.idle, %qf ))
				), 
				setq( a, sortby( sortby.connected, setdiff( %qf, %qi ))), 
				wdivider( 
					strcat( 
						name( %i0 ), 
						if( t( setr( z, get( %i0/coord ))), 
							%b%[%qz%] 
						), %b, 
						%(pop:, add( words( %qf ), words( %qu )), %)
					)
				), %r, 
				case( 1, 
					cand( t( %qf ), t( %qu )), 
					strcat( 
						u( format.where.findable, %qa %qi ), %,%b, 
						u( format.where.unfindable, %qu )
					), 
					t( %qf ), 
					u( format.where.findable, %qa %qi ), 
					t( %qu ), 
					u( format.where.unfindable, %qu ), 
					<< error: nobody is here so why am I listing this? >> 
					[if( isstaff( %0 ), -- c: %qc -- f: %qf -- u: %qu )]
				)
			), , %r 
		), %r, 
		setq( u, setdiff( %2, filter( fil.findable, %2, , , %0 ))), 
		setq( i, sortby( sortby.connected, filter( f.check.idle, %qu ))), 
		setq( a, sortby( sortby.connected, setdiff( %qu, %qi ))), 
		if( t( %qu ), 
			strcat( 
				wdivider( Unfindable ), %r, 
				u( format.where.findable, %qa %qi ), %r 
			)
		), 
		wfooter( [words( %1 )] rooms occupied )
	)


/*
--------------------------------------------------------------------------------
-- Where: Format (Un-)Findable Player Objects ----------------------------------
*/

&format.where.findable [v( d.bnww )]=
	iter( %0, 
		if( cor( not( u( f.check.idle, %i0 )), v( pref.segregate.idle )), 
			moniker( %i0 ), 
			ansi( xh, name( %i0 ))
		), , %,%b 
	)

&format.where.unfindable [v( d.bnww )]=ansi( xh, [words( %0 )] unfindable )



/*
================================================================================
== WHERE: Functions ============================================================


--------------------------------------------------------------------------------
-- Where: Rooms ----------------------------------------------------------------

List of rooms with people in them, as seen by enactor.

--

0: enactor dbref (%#)

l: lwho() with potentially unfindable people filtered out

*/

&f.where.rooms [v( d.bnww )]=
	strcat( 
		setq( l, 
			if( v( pref.where.count-unfindable ), 
				u( .lwho, %0 ), 
				filter( fil.findable, u( .lwho, %0 ))
			)
		), 
		setunion( iter( %ql, room( %i0 )), )
	)

