/*
BRAND NEW WHO/WHERE

A great number of Mush commands are based on a mix of two vertices: Player 
objects and room objects. These are epitomized by the commands 'who' (who is 
connected, and some light information about them) and 'where' (which rooms are 
populated with player objects, and some information about them).

The goal of the "Brand New Who/Where" system is to be game setup independent (as 
long the game is running TinyMUX, RhostMUSH, or PennMUSH), and to be easily 
extendable by writing further systems on top of this one, or asking this system 
for appropriate player object or room information.

current systems:
	who
	where
	finger
	staff
	name
	idle sweep

planned:
	hangouts
	directory
	watch

EXCEPT FOR THIS FILE, THERE IS NO NEED TO INSTALL THE OTHERS IN NUMERIC ORDER.



================================================================================
== System Assumptions and Defaults =============================================

--------------------------------------------------------------------------------
-- Preferences -----------------------------------------------------------------

Each system or the system as a whole uses a 'pref.' prefix to allow easier setup 
to change key system elements.

	&pref.<system>.<preference>


--------------------------------------------------------------------------------
-- "On Duty" -------------------------------------------------------------------

A staff or player administration concept to indicate availability to players.

&staff_duty:
	'1' or null: On-duty
	'0': Off-duty

This allows 'null' to mean on-duty, making staff duty opt-out.



================================================================================
== Setup Requirements ==========================================================

You will need the following systems:
	Myrddin's Mushcron

You will need the following user-defined functions:
	header(), footer(), divider()
	wheader(), wfooter(), wdivider()

You will need something like the following user-defined functions:
	isstaff( <dbref> ) - 1 if person is staff
	isapproved( <dbref> ) - 1 if person is allowed to be in-character or staff
	isapproved( <dbref>, status ) - returns 'approved' or 'unapproved', etc.
	titlestr( <string to prettify >)
	width( <target> ) - how wide is their screen?





################################################################################
## SETUP #######################################################################

The items in the setup file are used across many systems.

Some of them may seem more specific than others, but I think they're more useful 
for all of them.

*/

@create Brand New Who-Where <bnww>
@fo me=&d.bnww me=[search( name=Brand New Who-Where <bnww> )]

@set [v( d.bnww )]=INHERIT SAFE VISUAL


// Code Object Data Parent setup; optional

@if [isdbref( setr( d, search( name=Code Object Data Parent <codp> )))]={
		@parent [v( d.bnww )]=%qd; 
		&prefix.finger_fields [v( d.bnww )]=finger.; 
		&prefix.preferences [v( d.bnww )]=pref.; 
	}; 

/* 
--------------------------------------------------------------------------------
-- Setup: Triggers -------------------------------------------------------------
*/

@aconnect [v( d.bnww )]=
	@dolist lattr( %!/aconnect.* )={ @trigger %!/##=%# };

@adisconnect [v( d.bnww )]=
	@dolist lattr( %!/adisconnect.* )={ @trigger %!/##=%# };

@startup [v( d.bnww )]=
	@dolist lattr( %!/startup.* )={ @trigger %!/## };



/*
================================================================================
== DATA ========================================================================
*/

&d.mushcron [v( d.bnww )]=xxxx

@if [isdbref( setr( d, search( name=CRON - Myrddin's mushcron )))]={ 
		&d.mushcron [v( d.bnww )]=%qd
	}, { 
		think ansi( r, <BNWW Installer>, n, 
			%bMushcron cannot be found and is necessary for some systems to run. 
			Please install it and put the dbref on &d.mushcron [v( d.bnww )]. 
		)
	}



/* 
================================================================================
== PREFERENCES =================================================================

Preferences (&pref.*) are for easily changing behaviors of the system.

*/

// Preference: Segregate Idle? (1 = yes, 0 = no)
// make the idlers stand out or are separated from the main who listing

&pref.segregate.idle [v( d.bnww )]=1


// Preference: Seconds Idle/Seconds Superidle
// how idle is idle? (default: 1 hour/2 hours)

&pref.secs.idle [v( d.bnww )]=3600
&pref.secs.superidle [v( d.bnww )]=7200



/*
================================================================================
== DOT-FUNCTIONS ===============================================================

Functions that are generic and very quick.


--------------------------------------------------------------------------------
-- Generic Dot-Functions -------------------------------------------------------
*/

&.msg [v( d.bnww )]=ansi( h, <%0>, n, %b%1 )
&.plural [v( d.bnww )]=strcat( %0, %b, if( eq( %0, 1 ), %1, %2 ))
&.lwho [v( d.bnww )]=objeval( %0, lwho())
&.isstaff [v( d.bnww )]=isstaff( %0 )
&.isapproved [v( d.bnww )]=isapproved( %0, %1 )


/*
--------------------------------------------------------------------------------
-- Dot Function: OnDuty --------------------------------------------------------

Is someone "on duty" from their administrative job? See "On Duty", above.

Only an explicit "0" means "off duty". Every other condition is "on duty".

*/

&.onduty [v( d.bnww )]=not( strmatch( get( %0/staff_duty ), 0 ))


/*
--------------------------------------------------------------------------------
-- Dot Function: Remove Elements -----------------------------------------------

Remove elements from a delimited list of elements without upsetting the order

* Rhost: listdiff()

*/

@switch/first first( version())=
	RhostMUSH, {
		&.remove_elements [v( d.bnww )]=lit( listdiff( %0, %1, %2 )) 
	}, { 
		&.remove_elements [v( d.bnww )]=
			lit( ldelete( %0, iter( %1, matchall( %0, %i0, %2 ), %2 ), %2, %2 )) 

	}


/*
--------------------------------------------------------------------------------
-- Dot Function: Moniker -------------------------------------------------------

Cross-Platform function:
* Mux & Penn: moniker()
* Rhost: cname()

*/

@switch/first first( version())=
	RhostMUSH, { 
		&.moniker [v( d.bnww )]=lit( cname( %0 )) 
	}, { 
		&.moniker [v( d.bnww )]=
			lit( moniker( %0 )) 
	}


/*
--------------------------------------------------------------------------------
-- Dot Function: Titlestr ------------------------------------------------------

I like mine, but if you don't want to install my function:
	&.titlestr [v( d.bnww )]=iter( lcstr( %0 ), capstr( %i0 ))

*/

&.titlestr [v( d.bnww )]=titlestr( %0 )


/*
--------------------------------------------------------------------------------
-- Dot Function: Width ---------------------------------------------------------

Default: 80 characters

*/

&.width [v( d.bnww )]=localize( if( isint( setr( w, width( %0 ))), %qw, 80 ))


/*
--------------------------------------------------------------------------------
-- Dot Function: .inzone -------------------------------------------------------

	u( .inzone, <zmo>, <target> )

Is <target> part of the <zmo> zone?

*/

@switch/first version()=
	rhost*, { 
		&.inzone [v( d.bnww )]=lit( inzone( %0, %1 )); 
	}, 
	{ 
		&.inzone [v( d.bnww )]=lit( strmatch( zone( %1 ), %0 )); 
	}





/*
================================================================================
== FILTERS =====================================================================
*/

&fil.staff [v( d.bnww )]=u( .isstaff, %0 )
&fil.dark [v( d.bnww )]=hasflag( %0, dark )
&fil.name-match [v( d.bnww )]=strmatch( name( %0 ), %1* )
&fil.duty [v( d.bnww )]=u( .onduty, %0 )
&fil.off-duty [v( d.bnww )]=not( u( .onduty, %0 ))
&fil.in-room [v( d.bnww )]=strmatch( room( %0 ), %1 )

// can '%1' find '%0'? (usually '%0' is a list from 'lwho()')
&fil.findable [v( d.bnww )]=findable( %1, %0 )



/*
================================================================================
== SORTBYS =====================================================================
*/

&sortby.connected [v( d.bnww )]=comp( conn( %0 ), conn( %1 ))

// ... this isn't really a sortby, it's a function that sorts?
&sortby.connect-time [v( d.bnww )]=
	iter( sort( iter( %0, [conn(%i0)]:%i0 ), n ), rest( %i0, : ))



/* 
================================================================================
== CHECK FOR GENERAL CONDITIONS ================================================
*/

// idle checks 
&f.check.idle [v( d.bnww )]=gte( idle( %0 ), v( pref.secs.idle ))
&f.check.superidle [v( d.bnww )]=gte( idle( %0 ), v( pref.secs.superidle ))

// flag checks -- should this be &f.check.flag.<flag-name>???
&f.check.on-duty [v( d.bnww )]=u( .onduty, %0 )
&f.check.wikisprite [v( d.bnww )]=@@( <is a wikisprite> )
&f.check.storyteller [v( d.bnww )]=@@( <is a storyteller> )



/*
================================================================================
== FLAGS =======================================================================

Sometimes we want to display a single character describing duty status, desire 
for RP, or other similar elements in a condensed format.

Staff: Duty & Dark
Player: Wants RP & Responsibilities


--------------------------------------------------------------------------------
-- Flags: Who Flags ------------------------------------------------------------

These flags are mainly for '+who', but can be used by any part of the system.

*/

&f.get-who-flags [v( d.bnww )]=
	case( 1, 
		isstaff( %0 ), 
		strcat( 
			u( format.flags.staff.duty, %0 ), 
			u( format.flags.dark, %0 )
		), 
		strcat( 
			u( format.flags.wantrp, %0 ), 
			u( format.flags.wikisprite, %0 ), 
			u( format.flags.storyteller, %0 )
		)
	)


/*
--------------------------------------------------------------------------------
-- Flags: Formatting -----------------------------------------------------------

Dark symbols (ansi xh) indicate off duty for things like Wikisprite and 
Storyteller, and if someone is idle.

*/

&format.flags.staff.duty [v( d.bnww )]=
	case( 1, 
		u( f.check.idle, %0 ), ansi( xh, ! ), 
		u( f.check.on-duty, %0 ), ansi( h, * ), 
		ansi( xh, x )
	)

&format.flags.dark [v( d.bnww )]=
	if( hasflag( %0, DARK ), ansi( xh, D ))

&format.flags.wantrp [v( d.bnww )]=if( u( f.check.wantrp, %0 ), ~ )

&format.flags.wikisprite [v( d.bnww )]=
	if( u( f.check.wikisprite, %0 ), 
		if( u( f.check.on-duty, %0 ), ansi( h, ? ), ansi( xh, ? ))
	)

&format.flags.storyteller [v( d.bnww )]=
	if( u( f.check.storyteller, %0 ), 
		if( u( f.check.on-duty, %0 ), ansi( h, + ), ansi( xh, + ))
	)




/*
################################################################################
## CLEAN UP ####################################################################

[config( master_room )]
* Mux & Penn: #<number>
* Rhost: <number>

*/

@switch/first first( version())=
	RhostMUSH*, { 
		@tel [v( d.bnww )]=#[config( master_room )] 
	}, { 
		@tel [v( d.bnww )]=[config( master_room )] 
	}
