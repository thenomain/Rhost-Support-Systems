/*
CODE OBJECT DATA PARENT

The purpose of this is to @parent any code object to in order to give you a 
rundown of its attributes in an organized manner.

Usage:
	@fo me=@parent <object>=[v( d.codp )]

Configuration:
	&prefix.<header_name> <object>=<a list of attribute prefixes>

If you use a <header_name> that is by default on the Code Object Data Parent, 
it will override its prefixes.

Because this object uses @descformat, you may @desc your object as normal.

Requires:
	wheader(<text>):  Game's "pretty" output header
	wfooter(<text>):  Game's "pretty" output footer
	wdivider(<text>): Game's "pretty" output divider
	vtable(): Chime's vertical table layout system
	titlestr(): String edit to prettify a title


--------------------------------------------------------------------------------
-- Setup -----------------------------------------------------------------------
*/

@create Code Object Data Parent <codp>=10

@fo me=&d.codp me=[search( name=Code Object Data Parent <codp> )]

@set Code Object Data Parent <codp>=INHERIT PARENT_OK SAFE VISUAL

&ABOUT [v( d.codp )]=This object is for all other code objects to parent to. 
	It will format the attributes without clobbering a useful @desc.

/*
--------------------------------------------------------------------------------
-- Function Checks -------------------------------------------------------------
*/

@if not( 
		cand( 
			comp( header(), lit(header())), 
			comp( footer(), lit(footer())), 
			comp( divider(), lit(divider()))
		)
	)={ 
		think ansi( hr, 
			>> header()%, footer()%, or divider() doesn't exist. 
		) 
	}

@if not( comp( width(), lit(width())))={ 
		think ansi( hr, 
			>> width() doesn't exist%, so wheader() etc. won't work correctly. 
		) 
	}

@if not( comp( vtable(), lit(vtable())))={ 
		think ansi( hr, 
			>> vtable() doesn't exist. 
		) 
	}

@if not( comp( titlestr(), lit(titlestr())))={ 
		think ansi( hr, 
			>> titlestr() doesn't exist. 
		) 
	}



/*
--------------------------------------------------------------------------------
-- Default Prefixes ------------------------------------------------------------
*/

&PREFIX.SERVER_COMMANDS [v( d.codp )]=
	startup shutdown connect aconnect disconnect adisconnect listen ahear aahear 
	amhear amove

&PREFIX.DATA [v( d.codp )]=d. data.

&PREFIX.COMMANDS [v( d.codp )]=c. cmd.

&PREFIX.FUNCTIONS [v( d.codp )]=f. fn. fnc. fct.

&PREFIX.FILTERS [v( d.codp )]=fil. filter.

&PREFIX.TRIGGERS [v( d.codp )]=t. tr. trig.

&PREFIX.SORTS [v( d.codp )]=sort. sortby.

&PREFIX.DISPLAYS [v( d.codp )]=display. format.

&PREFIX.USER_FUNCTIONS [v( d.codp )]=
	ufunc. ufunc-switch. ufunc/

&PREFIX.@V_ATTRIBUTES [v( d.codp )]=
	VA VB VC VD VE VF VG VH VI VJ VK VL VM VN VO VP VQ VR VS VT VU VV VW VX 
	VY VZ

&PREFIX.DOT_ATTRS [v( d.codp )]=.


/*
--------------------------------------------------------------------------------
-- Descformat ------------------------------------------------------------------

0: @desc 

l: list of '<category> <attr> <attr> <attr>|...'
c: attribute count

*/

&DescFormat [v( d.codp )]=
	[localize( strcat( 
// SET REGISTERS
//.. l: list of prefix categories and contents
//.. i.e.: <category> <attr> <attr> <attr>|...
		setq( l, 
			iter( lattrp( %!/prefix.* ), 
				cat( 
					rest( %i0, . ), 
					iter( 
						get( %!/%i0 ), 
						lcstr( sort( lattr( %!/%i0* )))
					)
				), %b, | 
			)
		), 
//.. c: count attributes for footer
		setq( c, 
			words( setunion( iter( %ql, rest( %i0 ), | ), ))
		), 

// OUTPUT
		wheader( name( %! )), %r, 

//.. report @desc, if exists
		if( strlen( %0 ), %r%0%r%r, %rDesc is null for this code object.%r%r ), 

//.. for each category...
		iter( %ql, 
//.. .. if there is something in that category, display it with its title
			if( 
				words( rest( %i0 )), 
				strcat( 
					wdivider( titlestr( edit( first( %i0 ), _, %b ))), %r, 
					vtable( rest( %i0 )), %r 
				)
			), 
			|, @@ 
		), 

//.. footer: how many attributes?
		wfooter( cat( %qc, if( eq( %qc, 1 ), attribute, attributes )))
	))]



/* 
--------------------------------------------------------------------------------
-- cleanup ---------------------------------------------------------------------

Rhost does DescFormat in its own way. There are a few ways to do it, mentioned 
in the notes below.

*/

@switch/first version()=
	RhostMUSH*, { 
		@if not( strmatch( get( [v( d.codp )]/DescFormat ), *@@()* ))={
			@edit [v( d.codp )]/DescFormat=@@, {@@()}; 
		}; 
		
		@if eq( config(format_compatibility), 0 )={ 
			@mvattr [v( d.codp )]=DescFormat, FormatDesc; 
			@set [v( d.codp )]/FormatDesc = default; 
		}, 
		{
			@set [v( d.codp )]/DescFormat = default; 
		}; 
	}


/*
--------------------------------------------------------------------------------
-- Notes about Rhost and DescFormat --------------------------------------------

On Tiny and Mux (and maybe Penn), there are a few built-in attributes for 
pre-formatting text:
	@DescFormat
	@ConFormat
	@ExitFormat
	(?? more ??)

Rhost lets you build any pre-formatter you want, which is cool if you, for 
example, want ShortdescFormat or SpectralFormat. Format all the things!

But to do so, Rhost has two important considerations.


*** ONE: Is it DescFormat or FormatDesc? ***

This one's not Rhost's fault. At one time in Mush and Mux, it was @FormatDesc, 
but was reversed at some point in its history.

Rhost has a setting that can be put in the .config file or was set during the 
menu'd setup: format_compatibility

By default in Rhost, this is '0', or the original 'FormatDesc'.


*** TWO: Is the attribute set 'default'? ***

I'll be honest, I looked at the various help files and still don't understand 
what this attribute flag is supposed to do, but it's critical for passing the 
formatting down to children when you @parent to that object.

You can put a line into the .config file to make this global:
	admin attr_access=DescFormat default

(Make it 'FormatDesc' if that's the attribute!)

Or you can set the flag directly on the format attribute:
	@set <object>/DescFormat=default

For installers, this is how I opted to do it, to be safe.


*** BONUS: Do I Set It With @ or & ? ***

On Mux or Tiny, you can set the formats with '@<type>Format'. On Rhost, you must 
use the at-sign attribute setting, '&<type>Format', which fortunately also works 
on Mux.


*/